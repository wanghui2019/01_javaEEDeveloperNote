# 01_Day26_JavaSE基础26

[TOC]

## 01_网络编程三要素

* ip地址:在电脑一连上网络时就会被分配一个ip地址,用于网络通讯

    * 127.0.0.1,本地换回地址

    * 假如我们有一个server/client的应用程序,client向server发送请求, server将数据返回给client, 客户端client和服务器server需要两个不同的ip地址。现在我们要在本地测试这个应用程序, 则我们可以将我们本地ip当做客户端的地址,而127.0.0.1当做服务器server的地址, 客户端向127.0.0.1发送请求, 然后从127.0.0.1得到返回数据。另一个例子是假如我们本地的电脑上有一个数据库,另外一台电脑想要连接我们电脑上的数据库, 这时指定数据库时所用的地址则为本地ip 
    
* 端口号

    * 是每个程序在设备上的唯一标识

    * 端口号范围0~65535,其中1024以下的很多都被系统占用,不推荐使用

    * 常用端口:

        * mysql:3306

        * oracle:1521

        * web:80

        * tomcat:8080

* 通讯协议

    * 计算机网络中进行信息交换的规则

    * UDP

        * 面向无链接,数据不安全,速度快.不区分客户端和服务器

    * TCP

        * 面向连接(三次握手),数据安全,速度比UDP低.分客户端和服务器

        * 三次握手
        
        ```test
        第一次
        第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，
        并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号
        （Synchronize Sequence Numbers）。
        第二次
        第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），
        同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务
        器进入SYN_RECV状态；ACK:确认标志
        第三次
        第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认
        包ACK(ack=k+1），此包发送完毕，客户端和服务器进入
        ESTABLISHED（TCP连接成功）状态，完成三次握手。
        ```
    
## 02_UDP通信

* Socket也叫套接字

    * 其是网络上具有唯一标识的ip地址+端口号组合起来,用于客户端/服务器间的通信

    * 通信两端都有Socket,网络通信其实就是Socket间的通信

    * 数据在Socket间的通信是通过IO流

    * 知道了Socket号其实就是知道了ip地址+端口号,可以唯一识别

* 发送send

    * 创建DatagramSocket,随机端口号

    * 创建DatagramPacket,随机数据,长度,地址,端口

    * 使用DatagramSocket发送DatagramPacket

    * 关闭DatagramSocket

* 接收Receive

    * 创建DatagramSocket,指定端口号
        
    * 创建DatagramPacket,指定数组,长度

    * 使用DatagramSocket接收DatagramPacket

    * 关闭DatagramSocket

    * 从DatagramPacket中获取数据

* 接收方获取ip和端口号

    * String ip=packet.getAddress.getHostAddress();

    * int port=packet.getPort();

    
![Socket](media/15483935178358/Socket.png)

```java
package com.test26;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

public class Demo_Test26 {
	/*
	 * 发送数据
	 */
	public static void main(String[] args) throws Exception {
		//1.创建客户端DatagramSocket类+指定端口
		DatagramSocket socket=new DatagramSocket();    //客户端指定随机的端口号
		//2.准备要发送的数据,字节数组的形式
		String str="你好";
		byte[] arr=str.getBytes();    //将字符串转换为字节数组
		//3.将数据打包,并指明要发送的数据长度以及服务器的ip地址和端口号
		DatagramPacket packet=new DatagramPacket(arr, arr.length, InetAddress.getByName("127.0.0.1"), 6666);
		//4.将打包号的东西放到socket里开始发送
		socket.send(packet);
		//5.关流释放资源
		socket.close();
	}

}
```

```java
package com.test26;

import java.net.DatagramPacket;
import java.net.DatagramSocket;

public class Demo_Receive {
	/*
	 * 接收数据
	 */
	public static void main(String[] args) throws Exception{
		//1.创建服务器DatagramSocket+指定端口(该端口和发送端指定的服务器端口一致)
		DatagramSocket socket=new DatagramSocket(6666);
		//2.创建字节数组用于接收发送来的数据
		byte[] arr=new byte[1024];
		//3.开始将数据打包,封装为DatagramPacket
		DatagramPacket packet=new DatagramPacket(arr, arr.length);
		//4.开始接收
		socket.receive(packet);
		//5.分析接收到的数据,将该数据转换为字符串
		byte[] b=packet.getData();
		int len=packet.getLength();
		System.out.println(new String(b, 0, len));
		//6.关流释放资源
		socket.close();
	}

}
```

## 03_TCP通信

* 客户端

    * 创建Socket连接服务器(指定ip地址,端口号)通过ip地址找对应的服务器

    * 调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流

    * 输入端可以读取服务端输出流写出的数据

    * 输出流可以写出数据到服务器的输入流

    ```java
      //创建socket,指定要访问的ip地址+端口号
		Socket socket=new Socket("127.0.0.1", 6660); 
		//建立和服务器想通信的输入输出流
		InputStream is=socket.getInputStream();
		OutputStream os=socket.getOutputStream();
		//使用小数组的方式读取服务器传来的数据
		byte[] arr=new byte[1024*8];
		int len=is.read(arr);
		System.out.println(new String(arr, 0, len));
		//访问服务器
		os.write("西瓜为什么叫西瓜?".getBytes());
		//释放资源
		socket.close();
    ```

* 服务器

    * 创建ServerSocket(需要指定端口号)

    * 调用ServerSocket的accept()方法接收一个客户端请求,得到一个Socket

    * 调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流

    * 输入流可以读取客户端输出流写出的数据

    * 输出流可以写出数据到客户端的输入流

    ```java
      //指定服务器端口,让客户端能匹配上
		ServerSocket serversocket=new ServerSocket(6660);
		//创建socket,用于接收服务器端的请求
		Socket socket=serversocket.accept();
		//创建与服务器端通信的输入输出流
		InputStream is=socket.getInputStream();
		OutputStream os=socket.getOutputStream();
		//向客户端写数据
		os.write("请问找我有什么事?".getBytes());
		//使用小数组的方式读取客户端传来的数据
		byte[] arr=new byte[1024*8];
		int len=is.read(arr);
		System.out.println(new String(arr, 0, len));
		//服务器一般不关闭
    ```
    
## 04_服务器在的多线程

```java
ServerSocket serversocket=new ServerSocket(6660);   
		Socket socket=serversocket.accept();
		while(true) {
			//每接收一个客户端,就开启一条线程
			new Thread() {
				public void run() {
					try {
						//缓存字符可以里的readLine()方法可以整行的读,InputStreamReader可以将字节转换为字符
						BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
						/*
						BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
						//下面两行是服务器写给客户端的
						bw.write("欢迎来到影响联盟");               //向客户端写
						bw.newLine();                             //换行,为了让客户端读时的readLine()方法能识别到换行
						//下面一行是服务器从客户端读的
						System.out.println(br.readLine());        //服务器读取客户端的readLine()
						*/
						//获取打印字节输出流
						PrintStream ps = new PrintStream(socket.getOutputStream());
						//PrintStream下的println方法可以直接打印字符串,而且自带换行的功能
						ps.println("可以直接打印字符串");
						//下面一行是服务器从客户端读的
						System.out.println(br.readLine());   //服务器读取客户端的readLine()
					} catch (IOException e) {	
						e.printStackTrace();
					}
				}	
			}.start();
		}
	}
```