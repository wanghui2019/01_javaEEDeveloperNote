# 01_Day14_JavaSE基础14

[TOC]

## 01_正则表达式

* 就是用一系列规定的语言规则定义一个指定字符串,其本质是字符串,存在与String
类中

* 字符类(都是单个字符)

    * [abc] :  a,b或c

    * [\^abc] : 除了a,b,c之外的任意单个字符

    * [a-zA-Z] : a到z 或 A到Z的单个字符,两头的字母包括在内

    * [0-9] : 0到9的单个字符字符都包括

    * [a-d[m-p]]	a through d, or m through p: [a-dm-p] (union)
    
    * [a-z&&[def]]	d, e, or f (intersection)
    
    * [a-z&&[\^bc]]	a through z, except for b and c: [ad-z] (subtraction)
    
    * [a-z&&[\^m-p]]	a through z, and not m through p: [a-lq-z](subtraction)

* 预见字符类

    * .  : 任意单个字符

    * \d : 单个数字[0-9],前面要再加转义字符\

    * \w : 单个单词字符[a-z A-Z 0-9],前面要再加转义字符\

    * \W : 非单词字符[\^\w],前面要再加转义字符\

    * \s : 空白字符[\t\n\x0B\f\r],前面要再加转义字符\

    * \S : 非空白字符,前面要再加转义字符\

* Greedy数量词(X为正则表达式)

    * X?X : 一次或一次也没有

    * X*X : 零次或多次

    * X+X : 一次或多次

    * X{n}X : 恰好n次

    * X{n,}X : 至少n次

    * X{n,m}X : 至少n次,单不超过m次

## 02_正则表达式的一些功能

* 切割功能

    * public String[] split(String regex)

      ```java
      String regex="hello haha heihei";
		 String[] arr=regex.split(" ");            //遇到空格分割
		 for (int i = 0; i < arr.length; i++) {   //遍历
			 System.out.println(arr[i]);
		 }
      ```
      
    > 注意:如果是使用“.”进行分割,要加两个转义字符“\\.”
    
* 替换功能

    * public String replaceAll(String regex, String replacement);使用replacement去替换regex

      ```java
      String s="wo 3ai 7ni zho8ng guo";
		 String regex="\\d";     //表示数字
		 String rs=s.replaceAll(regex, "");    //拿""去替换s中的数字
		 System.out.println(rs);
      ```
      
* 分组功能(重难点)

    * 组((A)(B(C)))存在以下四个分组

        * 1.((A)(B(C)))
        
        * 2.(A)
        
        * 3.(B(C))
        
        * 4.(C)

* Pattern与matcher概述

    * 一个典型的例子

      ```java
      //其实就是拿正则去匹配字符串
       Pattern p = Pattern.compile("a*b");  //正则,获取到正则表达式
       Matcher m = p.matcher("aaaaab");     //字符串,获取匹配器
       boolean b = m.matches();             //看是否能匹配,匹配就返回true
      ```
      
## 03_Math类


*  Math类包含基本数学运算的方法,方法全部都是静态的

* public static int abs(int a);                 //取绝对值  

* public static double ceil(double a);          //向上取整

* public static double floor(double a);         //向下取整

* public static int max(int a,int b);           //取最大值

* public static double pow(double a,double b);  //求幂,a^b

* public static double random();                //[0 1)之间的随机数

* public static int round(float a);             //四舍五入

* public static double sqrt(double a);          //开根号

> 注意:random除了作为Math里的方法外,其单独也是一个类

* Random类

    * 构造方法

      ```java
      Random r=new Random();
      ```
      
    * nextInt方法

      ```java
      Random r=new Random();
      int i=r.nextInt(10);      //传入的参数用于限定范围,范围被限制在[0 10)
      System.out.println(i);
      ```
      
## 04_System类的概述

* 成员方法

    * public static void gc();调用垃圾回收器,在Object类中有finalize()方法,该方法可以自动清理垃圾,但是如果垃圾太少,就不会执行finalize()方法,此时可以通过gc()清理

      ```java
      public class Demo_Test14 {
    	 public static void main(String[] args) {
    		  new Demo();                      //并不会执行Demo里的方法finalize(),垃圾太少了
    		  System.gc();                     //那就人工清理垃圾,多少都清理
    	     }
       }
        class Demo{                              //任何类都继承Object类
        	public void finalize(){              //重写Object类中的自动清理垃圾方法
        		 System.out.println("自动清理垃圾");
        	    }
        }
      ```
      
    * public static void exit(int status);退出java虚拟机JVM,status为0是表示正常退出,非0时表示不是正常退出

      ```java
      System.exit(0);
      ```
      
    * public static long currentTimeMillis();获得从1970年1月1日到当前时间的时间差(以毫秒为单位测量)

      ```java
      long time=System.currentTimeMillis();    //获得从1970年1月1日到当前时间的时间差
		 System.out.println(time);        //打印输出
      ```
      
    * public static void arrayCopy(Object src, int srcPos, Object dest, int destPos, int length);把一个数组复制到另外一个数组里

        * src : 原数组

        * srePos : 原数组要复制的开始位置

        * dest : 原数组要复制进的一个数组

        * destPos: 从该数组的哪个位置开始复制

        * length : 原数组要复制过去的数组长度

          ```java
            int[] src= {1,2,3,4,5};                 //原数组
		      int[] dest=new int[8];                  //原数组要复制进去的一个数组
		      System.arraycopy(src, 0, dest, 1, 4);   //开始复制
		      for (int i = 0; i < dest.length; i++) { //对复制后的dest进行遍历输出
			   System.out.print(dest[i]+" ");
          ```
          
## 05_BigInteger类

* BigInteger类用于存放很大的数,而且存放的数可以进行数值运算

* 构造方法

    * public BigInteger(String val);

* 成员方法

    * public BigInteger add(BigInteger val);加

    * public BigInteger subtract(BigInteger val);减

    * public BigInteger multiply(BigInteger val);乘
    
    * public BigInteger divide(BigInteger val);除
    
    * public BigInteger[] divideAndRemainder(BigInteger val);返回BigInteger[]数组类型,数组里是商和余数

## 06_BigDecimal类

* BigDecimal类为了获取更加精确的小数,其也有加,减,乘,除运算

  ```java
  System.out.println(2.0-1.1);   //这样得的数值不精确,结果为0.899999999...
  ```
  
  ```java
  BigDecimal b1=new BigDecimal(2.0);    //传入double型
	BigDecimal b2=new BigDecimal(1.1);
	System.out.println(b1.subtract(b2));   //这样得的结果也是不精确的
  ```
  
  ```java
  BigDecimal b1=new BigDecimal("2.0");    //传入字符型
	BigDecimal b2=new BigDecimal("1.1");
	System.out.println(b1.subtract(b2));   //这样得到的结果才是精确的
  ```
  
> 注意:以后开发中适合传字符类型的进行运算

## 07_Date类(util下的)

* 构造方法

    * Date();空参构造

      ```java
      Date d=new Date();          //代表当前时间
      ```

    * Date(long date);有参构造

      ```java
      Date d=new Date(0);       //传入0代表1970年1月1日0点,东八区市8点,这个时间是C语言和UNIX生日.
      Date d=new Date(1000);   //传1000表示在1970年1月1日的0:0:0基础上又过了1000毫秒,即又过了1秒,此为1970年1月1日0:0:1
      ```
      
* 成员方法

    * public long getTime();

      ```java
      Date d=new Date();     
		System.out.println(d.getTime()); //返回当前时间的毫秒值,和currentTimeMillis()作用一样
      ```

    * public void setTime(long time);

      ```java
      Date d=new Date();     
		d.setTime(1000);        //设置时间,改变时间对象.重点在于改变
		System.out.println(d);  //将时间值改变为Thu Jan 01 08:00:01 CST 1970
      ```
      
## 08_SimpleDateformat类

* SimpleDateformat类进行对日期进行格式化

* 构造方法

    * SimpleDateFormat();空参构造

      ```java
      Date d=new Date();                           //创建日期对象
		SimpleDateFormat sdf=new SimpleDateFormat(); //创建日期格式化类对象
		//接下来要指定格式化的方法
		System.out.println(sdf.format(d));           //这里的format(Date date)是从其父类DateFormat类中继承的,子类可以使用父类的任何非私有方法
	}
      ```

    * SimpleDateFormat(String pattern);有参构造

      ```java
      Date d=new Date();                           //创建日期对象
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss"); //创建日期格式化类对象
		//接下来要指定格式化的方法
		System.out.println(sdf.format(d));
      ```
      
* 成员方法

    * public final String format(Date date);从其父类DateFormat类中继承的,子类可以使用父类的任何非私有方法,只是因为子类的format不能传入单个日期对象才用父类

    * public Date parse(String source);将时间字符串转为日期对象

      ```java
      String s="2019年1月16日04:25:30";             //一个日期类型的字符串
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy年MM月dd日HH:mm:ss");  //创建格式化的日期类
		Date d=sdf.parse(s);                         //将字符串转换为日期
		System.out.println(d);
      ```
      
## 09_Calendar类

* Calendar类是一个抽象类,Date中许多过时的方法都由Calendar代替了

* 成员方法

    * public static Calendar getInstance();

      ```java
      Calendar c=Calendar.getInstance();   //父类引用指向子类对象,有子类对象就能调用方法了
      ```

    * public int get(int field);获取年,月,日...

      ```java
      System.out.println(c.get(Calendar.YEAR));  //获取年
		System.out.println(c.get(Calendar.MONTH));  //获取月,月的初始值是0
		System.out.println(c.get(Calendar.DAY_OF_MONTH));  //获取月中的日
		System.out.println(c.get(Calendar.DAY_OF_WEEK));  //获取星期中的日,周日是第一天
      ```
      
    * public void add(int field,int amount);field:特定日期,可指年,月,日...  amount表示数目,整数表示在原有基础上+1,负数表示在原有基础上-1

      ```java
      c.add(Calendar.MONTH, 1);    //正数表示+1,负数表示-1
      ```
      
    * public final void set(int year,int month,int date);修改日期

      ```java
      c.set(2000,01,06);      //将日期改为2000年2月6日
      ```
      
    * public void set(int field,int value);把field的日期值修改成value值
      
      ```java
      c.set(Calendar.YEAR, 2000);    //将年改为2000年
      ```
      
## 10_总结

![](https://i.loli.net/2019/01/16/5c3efdb789fff.png)