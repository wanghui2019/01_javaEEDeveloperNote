# 01_Day13_JavaSE基础13

[TOC]

## 01_StringBuffer类的概述

* StringBuffer是线程安全的

* StringBuffer是可变的字符序列,String是不可变的字符序列

## 02_StringBuffer的构造方法

* public StringBuffer();无参构造方法

  ```java
  StringBuffer sb=new StringBuffer();  //默认空间16个空位,如果什么都不存,长度依然为0,单空位还是16个.
  System.out.println(sb.length());
  ```

* public StringBuffer(int capacity);指定容量的字符串缓存区对象

  ```java
  StringBuffer sb=new StringBuffer(10);
  System.out.println(sb.length());
  ```

* public StringBuffer(String str);指定字符串内容的字符串缓存对象

  ```java
  StringBuffer sb=new StringBuffer("abc");
  System.out.println(sb.length());
  ```

* StringBuffer的方法

     * public int capacity();返回当前容量。    理论值
     
       ```java
       StringBuffer sb=new StringBuffer("abc");
       System.out.println(sb.capacity());         //输出值为空位16+实际值3=19
       ```
     
     * public int length();返回长度(字符数)。 实际值
      
        ```java
        StringBuffer sb=new StringBuffer("abc");
        System.out.println(sb.length());         //输出值为实际值的3
        ```
      
## 03_StringBuffer的添加功能

* public StringBuffer append(String str);可以把任意类型的数据添加到字符串缓存区里面,并返回字符串缓冲区本身

  ```java
  StringBuffer sb=new StringBuffer();
  sb.append("a1*");
  ```

* public StringBuffer insert(int offset,String str);在指定位置把任意类型的数据插入到字符串缓冲区里面,并返回字符串缓存区本身

  ```java
  StringBuffer sb=new StringBuffer("abc");
  StringBuffer sb1=sb.insert(1, "ffff");
  System.out.println(sb1);
  ```

## 04_StringBuffer的删除功能

* public StringBuffer deleteCharAt(int index);删除指定位置的字符,并返回

 ```java
 StringBuffer sb=new StringBuffer("abc");
 System.out.println(sb.deleteCharAt(1));
 ```
 
* public StringBuffer delete(int start,int end);删除从指定位置开始到指定位置结束的内容,并返回

  ```java
  StringBuffer sb=new StringBuffer("abc");
  System.out.println(sb.delete(0, 2));     //左闭右开

  StringBuffer sb=new StringBuffer("abc");
  System.out.println(sb.delete(0, sb.length()));    //清空缓存区
  ```

## 05_StringBuffer的替换和反转功能

* StringBuffer的替换功能

    * public StringBuffer replace(int start,int end,String str);从start到end用str替换

     ```java
     StringBuffer sb=new StringBuffer("abcdef");
     System.out.println(sb.replace(1, 3, "oooo"));   //左闭右开
     ```

* StringBuffer的反转功能

    * public StringBuffer reverse();字符串反转

      ```java
      StringBuffer sb=new StringBuffer("abcdef");
	   System.out.println(sb.reverse());
      ```
      
## 06_StringBuffer的截取功能

* public String substring(int start);从指定位置开始截取知道末尾

  ```java
  StringBuffer sb=new StringBuffer("abcdef");
  System.out.println(sb.substring(3));   //左闭
  ```

* public String substring(int start, int end);从指定位置截取到指定位置结束

   ```java
   StringBuffer sb=new StringBuffer("abcdef");
   System.out.println(sb.substring(3,5));   //左闭右开
   ```

> 注意:StringBuffer的截取功能返回值类型是String类型

## 07_StringBuffer与String之间的相互转换

* String --> StringBuffer

    * 通过构造方法

      ```java
      StringBuffer sb=new StringBuffer("abcdef");
      ```

    * 通过append()方法.append()方法能见任意类型转成StingBuffer类型

* StringBuffer --> String

    * 通过构造方法

      ```java
      StringBuffer sb=new StringBuffer("abc");
      String s=new String(sb);
      ```

    * 通过toString()方法

    * 通过subString(0,length)

## 08_StringBuilder与StringBuffer的区别

  * StringBuffer是jdk1.0版本的,线程安全,效率低

  * StringBuilder是jdk1.5版本的,线程不安全,效率高

  * 两者都是可变序列,其它使用方法基本相同

  * 线程安全与线程不安全的区别

      * 线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行 保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。 

      * 线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据

## 09_String以及StringBuffer作为参数传递时的情况

* String作为参数传递时其最初定义好的String对象不会改变,可以理解为String一旦创建就不在改变

  ```java
  String s=new String("abc");
	System.out.println(s);       //打印为abc
	change(s);                   //调用change方法,调用完后方法弹栈
	System.out.println(s);       //由于change方法弹栈,所以此处不变
	public static String change(String s) {
		return s+="de";
	}
  ```
  
* StringBuffer作为参数传递时,其值可以改变

  ```java
  StringBuffer sb=new StringBuffer("abc");
	System.out.println(sb);
	change(sb);
	System.out.println(sb);
	public static StringBuffer change(StringBuffer sb) {
		return sb.append("de");
	}
  ```
  
## 10_类Arrays中的一些好用的方法

* public static String toString(int[] a);将int数组转成字符数组输出

  ```java
  int[] a={33,22,55,66,11,44};
  System.out.println(Arrays.toString(a));
  ```

* public static void sort(int[] a);排序,默认从小到大

  ```java
  int[] a={33,22,55,66,11,44};
  Arrays.parallelSort(a);
  System.out.println(Arrays.toString(a));
  ```

* public static int binarySearch(int[] a,int key);二分查找法,找到key值所对应的索引位置,如果找不到,返回-(插入点)-1

  ```java
  int[] a={11,22,33,44,55,66};
  System.out.println(Arrays.binarySearch(a,33));    //返回2
  System.out.println(Arrays.binarySearch(a,30));   //返回-2-1=-3
  ```
  
## 11_基本包装类

* 为什么会有基本包装类

    * 就是将基本数据类型包装成对象,好处在于可以在对象中定义更多的功能方法操作该数据

    * 常用操作:用于基本数据类型与字符串之间的转换

* 基本数据类型与包装类的对应

    ```test
    基本数据类型           包装类
    byte                  Byte
    short                 Short
    int                   Integer
    long                  Long
    float                 Float
    double                Double
    char                  Character
    boolean               Boolean
    ```
    
## 12_Integer类的概述

* Integer类在对象中封装了一个基本类型int值,该类提供了多个方法,可以在int类型与String类型之间相互转换

* 构造方法

    * public Integer(int value);将int值封装成Integer类型

      ```java
      Integer i=new Integer(123);
      ```

    * public Integer(String s);将String类型封装成Integer类型

      ```java
      Integer i=new Integer("123");  //String类型必须是数字型的,否则会报错
      ```
      
## 13_int类型与String类型的相互转换

* int --> String

    * 和“”拼接

      ```java
      int a=10;
      String s=a+"";
      ```
    
    * public static String valueOf(int i);

      ```java
      String s=String.valueOf(10);
      ```
    
    * int --> Integer --> String(Integer类的toString方法())

      ```java
      Integer i=new Integer(10);        //先将整型转换为Integer类型
		System.out.println(i.toString()); //再将Integer类型转换为String类型
      ```
    
    * public static String toString(int i)(Integer类的静态方法)

      ```java
      System.out.println(Integer.toString(10));   //静态方法
      ```

* String --> int

    * String --> Integer --> int

      ```java
      Integer i=new Integer("10");        //将String类型封装成Integer类型
      System.out.println(i.intValue());   //将Integer类型转换为int类型
      ```

    * public static int parseInt(String s);

      ```java
      System.out.println(Integer.parseInt("10"));
      ```
    
    > 注意:基本数据类型共8中,其中7中都有parseXXX的方法,可以将这7种的字符串表现形式转换成基本数据类型.只有char类型没有.char的字符串类型转换为char数组的方法
    * toCharArray()

      ```java
      String s="abcde";                       //定义一个字符串对象
		char[] arr=s.toCharArray();              //转换为字符数组
		for (int i = 0; i < arr.length; i++) {   //遍历
			System.out.print(arr[i]+" ");
		}   
      ```
      
## 14_自动装箱和自动拆箱

* 自动装箱和自动拆箱是JDK5具有的新特性

    ```java
    Integer i1=100;  //自动装箱.将基本数据类型转换为Integer类型
    int i2=i1+10;    //自动拆箱.将Integer类型转换为int类型
    /*注意:如果使用时Integer i=null,会报错误,因为自动拆箱的过程时通过调用
    intValue()方法实现的,null不能调用方法*/
    ```
    
* 自动装箱与自动拆箱的面试题分析

    ```java
     Integer i1=127;
	  Integer i2=127;           //-128~127为分界线,在这之间数据存放在常量池
	  System.out.println(i1==i2);         //true
	  System.out.println(i1.equals(i2));  //true
	  System.out.println("------");
	  Integer i3=128;
	  Integer i4=128;          //超过128就是两个对象了
	  System.out.println(i3==i4);         //false
	  System.out.println(i3.equals(i4));  //true
    ```
    
## 15_总结

![](https://i.loli.net/2019/01/15/5c3da4f549435.png)
    

    
    