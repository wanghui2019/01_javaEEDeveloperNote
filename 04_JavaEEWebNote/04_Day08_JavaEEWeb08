# 04_Day08_JavaEEWeb08

[TOC]

## 01_Ajax

* Ajax并不是新的内容,只是将以前的东西整合了一下而已,Asynchronous Javascript And XML(异步JavaScript和XML)

    * 同步:客户端向服务器发送请求,接收到服务器的响应后再次发送

    * 异步: 还没等待到服务器的响应,继续发送请求

* 作用:可以实现局部刷新,使用Ajax技术不需要刷新整个网页

## 02_Ajax的get请求方式

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript">
	//创建一个XMLHttpRequest对象 ,利用此对象与服务器进行通信 是AJAX技术的核心
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	function ajaxFunction() {
		var xmlHttp;
		try { // Firefox, Opera 8.0+, Safari
			xmlHttp = new XMLHttpRequest();
		} catch (e) {
			try {// Internet Explorer
				xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
			} catch (e) {
				try {
					xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
				} catch (e) {
				}
			}
		}

		return xmlHttp;
	}
	
	//执行get请求
	function get(){
		//1.创建xmlhttprequest对象
		var request=ajaxFunction();
		/*
		请求方式:get
		请求路径:/DemoServlet,其是一个servlet
		是否异步请求:true
		*/
		//2.设置要发送的请求
		//request.open("GET","DemoServlet","true")
		//携带请求的数据
		request.open("GET","DemoServlet?name=zhangsan&age=18","true")
		//3.发送请求
		request.send();
	}
</script>
</head>
<body>
	<h3>
		<a href="" onclick="get()">点击Ajax方式发送get请求</a>
	</h3>
</body>
</html>
```

## 03_Ajax的Get请求&获取数据
	
* 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。

    0: 请求未初始化
    1: 服务器连接已建立
    2: 请求已接收
    3: 请求处理中
    4: 请求已完成，且响应已就绪
    
    ```jsp
    
    //执行get请求
	function get(){
		//1.创建xmlhttprequest对象
		var ajax=ajaxFunction();
		/*
		请求方式:get
		请求路径:/DemoServlet
		是否异步请求:true
		*/
		//2.设置要发送的请求
		ajax.open("GET","DemoServlet?name=zhangsan&age=18","true")
		//如果请求状态发生了改变,就执行条件内的内容
		ajax.onreadystatechange=function(){
    		/*
        前提:servlet已经对数据进行了响应
        */
			//readyState==4:请求已完成，且响应已就绪
			//status==200,获取响应成功
			 if (ajax.readyState==4 && ajax.status==200){
			    alert(ajax.responseText);
			  }
		}
		//3.发送请求
		ajax.send();
		
	 }
    ```
    
## 04_Ajax的Post请求&获取数据

* 基本和Post相同

```jsp
 //执行Post请求
	function get(){
		//1.创建xmlhttprequest对象
		var ajax=ajaxFunction();
		/*
		请求方式:post
		请求路径:/DemoServlet
		是否异步请求:true
		*/
		//2.设置要发送的请求,路径不能携带信息
		ajax.open("POST","DemoServlet","true")
		//如果请求状态发生了改变,就执行条件内的内容
		ajax.onreadystatechange=function(){
    		/*
        前提:servlet已经对数据进行了响应
        */
			//readyState==4:请求已完成，且响应已就绪
			//status==200,获取响应成功
			 if (ajax.readyState==4 && ajax.status==200){
			    alert(ajax.responseText);
			  }
		}
		
		ajax.setRequestHeader("Content-type","application/x-www-form-urlencoded");
		//3.post携带数据
		ajax.send("name=lisi&age=20");
		
	}
```

## 05_JQury的三种从servlet拿值并放值的方法

* load加载,load底层使用set请求做的,返回元素默认test()

    ```jsp
    <script type="text/javascript" src="js/jquery-1.11.3.min.js"></script>
    <script type="text/javascript">
    $(function(){
    	$("#button").click(function(){
    		  $("#div1").load("JQuryLoad",function(responseTxt,statusTxt,xhr){
    		    $("#div1").val(responseTxt);
    		 });
    	});
    });
    
    	
    </script>
    </head>
    <body>
    	<h1>点击将servlet的数据加载过来</h1>
    	<input type="button" onclick="onload()" value="点我加载数据进去" id="button"><br>
    	<input type="text" id="div1">
    </body>
    ```
    
* set

    ```jsp
        <script type="text/javascript" src="js/jquery-1.11.3.min.js"></script>
    <script type="text/javascript">
    $(function(){
    	$("#button").click(function(){
    		  $.get("JQuryLoad",function(data,status){
    			/*
    			text() - 设置或返回所选元素的文本内容
    			html() - 设置或返回所选元素的内容（包括 HTML 标记）
    			val() - 设置或返回表单字段的值
    			*/
    			//此处不能使用val,因为div中没有value
    		    //$("#div1").html(data);
    		    $("#div1").html(data);
    		  });
    		});
    });
    </script>
    </head>
    <body>
    	<h1>点击将servlet的数据加载过来</h1>
    	<input type="button" onclick="onload()" value="点我加载数据进去" id="button"><br>
    	<div id="div1" style="border:1px solid blue;width:50px;height:50px;">
    	</div>
    </body>
    </html>
    ```
    
* text() - 设置或返回所选元素的文本内容...文本

* html() - 设置或返回所选元素的内容（包括 HTML 标记）...html,可以使用html标签设置文本属性

* val() - 设置或返回表单字段的值...只能用在含有value属性的标签里
    
* get

    ```jsp
        <script type="text/javascript" src="js/jquery-1.11.3.min.js"></script>
    <script type="text/javascript">
    $(function(){
    	$("#button").click(function(){
    		  $.post("JQuryLoad",
    		  {
    		    name:"张三",
    		    city:"深圳"
    		  },
    		  function(data,status){
    		    $("#div1").html(data);
    		  });
    		});
    });
    </script>
    </head>
    <body>
    	<h1>点击将servlet的数据加载过来</h1>
    	<input type="button" onclick="onload()" value="点我加载数据进去" id="button"><br>
    	<div id="div1" style="border:1px solid blue;width:50px;height:50px;">
    	</div>
    </body>
    ```
    
## 06_XStream的使用

* 先导包

    * xstream-1.4.4.jar

    * xpp3_min-1.1.4c.jar

* 作用:将任意类型的文件转换为XML文件类型

    * 创建XStream对象`XStream xStream=new XStream();`

    * 转换一个对象为XML字符串`String xml=xStream.toXML(list);`

    * 设置别名,将CityBean类的别名设置为city,试试就知道了`xStream.alias("city",CityBean.class);`

    * 把id做成属性`xStream.useAttributeFor(CityBean.class,"id");`

## 07_Json

* 阅读性更好,容量更小

* 先导包

    * 包有点多,导必须依赖包

* 把javaBean转换为json数据

    * 把list集合转换为json数据

    ```json
    JSONArray jsonArray=JSONArray.fromObject(list);
    String json=jsonArray.toString();
    ```