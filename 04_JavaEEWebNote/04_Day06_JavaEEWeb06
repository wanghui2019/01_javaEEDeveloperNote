# 04_Day06_JavaEEWeb06

[TOC]

## 01_事务

* 什么是事务?

    * transaction: 一组操作,里面有很多单一逻辑,只有有一个逻辑吗没有成功,就算失败,所有数据都有回滚到最初的状态(rollback)

    * 例子:转账问题,A向B转账100块钱,是A-100和B+100这两个逻辑,执行了A-100逻辑后,假如服务器断电了,就会造成回滚,使得数据回到最初的状态

* 命令行操作事务

    * 1.关闭自动提交功能

    `set autocommit=off;`
    
    * 2.开启事务

    `start transaction`
    
    * 3.更改数据

    `update bank set money=money-100 where id=1;`
    
    * 4.提交数据/回滚数据

    `commit;`提交数据,第三步的更改数据就会生效,数据被写在磁盘上
    
    `rollback;`回滚数据,第三步的更改数据就不会生效 
    
* java代码操作事务

    * 1.通过conn.setAutoCommit(false)来关闭自动提交的设置

    * 2.提交事务 conn.commit();

    * 3.回滚事务 conn.rollback();

* 事务的特性

    * 原子性

    > 值得是 事务中包含的逻辑,不可分割
    
    * 一致性

    > 值得是 事务执行前后 数据完整性
    
    * 隔离性

    > 指的是 事务在执行期间不可以收到其它事务的影响
    
    * 持久性

    > 指的是 事务执行成功,那么数据应该持久保存在磁盘上
    
## 02_事务的安全隐患

* 不考虑隔离级别设置,那么会出现以下问题

    * 读

    > 脏读    不可重复读   幻读
    
    * 脏读:一个事务读到了另外一个事务还未提交的数据

        * 脏读出现情况:隔离级别被设置为读未提交

            * 1.查看当前的隔离级别`select @@tx_isolation;`
            
            * 2.设置隔离一次回话的隔离级别为读未提交
            
            `set session transaction isolation level read uncommitted`
            
            * 3.开启事务,如果同时打开两个终端,终端事务都是操作的一个表,就会出现脏读

    * 不可重复读:一个事务读到了另外一个事务提交的数据,造成了前后两次查询结果不一样

        *  不可重复读出现情况:隔离级别被设置为了读已提交`read committed`.

    * 可重复读:事务之间不受影响,开启两个事务,即使是操作的是一张表,A事务对表的更新数据并不会让B事务中表的数据改变

        * 隔离级别被设置为可重复读`repeatable read`
        
    * 解决上面出现的安全问题,可以使用可串行化`serializable`,可串行化是只有其中有一方连接的隔离级别被设置了串行化,那么谁先打开了事务,谁就有了先执行的权利,谁后打开事务,谁就只能等着,等前面那个事务提交或者回滚后,后面这个事务才能执行.这种隔离级别少用,因为效率低

    * 按效率划分

    读未提交 > 读已提交 > 可重复读 > 可串行化
    
    * 按拦截程度

    可串行化 > 可重复读 > 读已提交 > 读未提交
    
## 03_事务注意

* 1.事务默认是自动提交,除非设置conn.setAutoCommit(false)

* 2.事务值针对连接对象,如果再开一个连接对象,那么默认提交

* 安全隐患

    * 读

        * 脏读

        一个事务读到了另外一个事务未提交的数据
        
        * 不可重复读

        一个事务读到了另外一个事务已提交的数据,造成前后两次查询结果不一致
        
        * 一个事务读到了另外一个事务insert into的数据,造成前后查询结果不一致

    * 写

        * 丢失更新:

        ![](https://i.loli.net/2019/02/18/5c6a7d96b682e.png)
        
        * 解决方案:

            * 悲观锁

            ![](https://i.loli.net/2019/02/18/5c6a7dc85a71e.png)
        
            * 乐观锁

            ![](https://i.loli.net/2019/02/18/5c6a7ddbb4db6.png)

* 隔离级别

    * 读未提交

    引发问题:脏读
    
    * 读已提交

    解决:脏读      引发:不可重复读
    
    * 可重复读

    解决:脏读,不可重复读     未解决:幻读
    
    * 可串行化

    解决:脏读,不可重复读,幻读
    
> mysql 默认隔离级别 可重复读

> Oracle 默认隔离级别 读已提交

## 04_数据库连接池

* 数据库的连接对象比较消耗性能,所有有了数据库连接池,在内存中开辟一块空间,一开始先向池子里放置多个连接对象,后面需要连接的话,直接从池子里拿,不需要再自己创建,使用完后,归还连接,确保连接对象可以循环使用.

![](https://i.loli.net/2019/02/18/5c6a7fb7436f4.png)

* 创建数据库连接池

```java
//注意:该连接类要实现DataSource接口
//创建一个集合对象,用于存放连接池
	List<Connection> list=new ArrayList<Connection>();
	//一开始先向池子里放10个数据库连接对象,构造函数创建,或者静态代码块
	public MyDataSource() {
		for (int i = 0; i < 10; i++) {
			Connection conn = JDBCInit.getConn();
			list.add(conn);
		}
	}
	
	//只用这一个方法
	public Connection getConnection() throws SQLException {
		//来拿时先看看池子里有没有,如果没有,再添加几个
		if (list.size()==0) {
			for (int i = 0; i < 3; i++) {
				Connection conn = JDBCInit.getConn();
				list.add(conn);
			}
		}
		//每次创建连接就从池子里拿走一个连接对象,总是拿走第一个
		Connection conn = list.remove(0);
		return conn;
	}
	//用完后记得归还
	public void addBack(Connection conn) {
		list.add(conn);
	}
```

> 方法的最后要记得调用方法addBack(conn)归还连接池对象,这反而是不完美的,就这一点使用装饰者模式进行装饰

## 05_装饰者模式改善数据库连接池的问题

* 要求调用conn.close()方法就可以在释放资源前就可以归还连接对象,因此需要在conn对象上下手,对该对象进行包装,使其在释放资源前先归还连接对象

```java
public class ConnectionWrap implements Connection {
	
	Connection connection=null;
	List<Connection> list;
	public ConnectionWrap(Connection connection,List<Connection> list) {
		this.connection=connection;
		this.list=list;
	}
	
	public void close() throws SQLException {
		//释放资源之前先把连接对象归还回来
		list.add(connection);
	}
	
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		
		return connection.prepareStatement(sql);
	}
```

```java
package com.transaction;

import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.sql.DataSource;

import com.jdbc.init.JDBCInit;

public class MyDataSource implements DataSource{
	//创建一个集合对象,用于存放连接池
	List<Connection> list=new ArrayList<Connection>();
	//一开始先向池子里放10个数据库连接对象,构造函数创建,或者静态代码块
	public MyDataSource() {
		for (int i = 0; i < 10; i++) {
			Connection conn = JDBCInit.getConn();
			list.add(conn);
		}
	}
	
	//只用这一个方法
	public Connection getConnection() throws SQLException {
		//来拿时先看看池子里有没有,如果没有,再添加几个
		if (list.size()==0) {
			for (int i = 0; i < 3; i++) {
				Connection conn = JDBCInit.getConn();
				list.add(conn);
			}
		}
		//每次创建连接就从池子里拿走一个连接对象,总是拿走第一个
		Connection conn = list.remove(0);
		//直接对Connection对象进行包装
		Connection connection=new ConnectionWrap(conn, list);
		return connection;
	}
```

## 06_数据库连接池jar包的使用

* DBCP

    * 普通方法创建连接池
    
    ```java
    Connection conn=null;
    BasicDataSource datasource=new BasicDataSource();
    datasource.setDriverClassName("com.mysql.jdbc.Driver");
    datasource.setUrl("jdbc:mysql://localhost/myfirstbase");
    datasource.setUsername("root");
    datasource.setPassword("123456");
    conn = datasource.getConnection();
    ```
    
    * 使用属性配置文件创建连接池
    
    ```java
    //记得修改配置文件里数据库的配置信息
    Connection conn=null;
    BasicDataSourceFactory factory=new BasicDataSourceFactory();
    Properties properties=new Properties();
    InputStream is=new FileInputStream(new File("dbcpconfig.properties"));
    //inputStream is=Demo_DBCP.class.getClass().getClassLoader().getResourceAsStream("dbcpconfig.properties");
    properties.load(is);
    DataSource dataSource=factory.createDataSource(properties);
    		
    conn=dataSource.getConnection();
    ```

* C3P0

    * 普通方法

    ```java
    Connection conn=null;
    ComboPooledDataSource datasource=new ComboPooledDataSource();
    datasource.setDriverClass("com.mysql.jdbc.Driver");
    datasource.setJdbcUrl("jdbc:mysql://localhost/myfirstbase");
    datasource.setUser("root");
    datasource.setPassword("123456");
    
    conn = datasource.getConnection();
    ```
    
    * xml文件配置方法

    ```java
    Connection conn=null;
	  ComboPooledDataSource datasource=new ComboPooledDataSource();
		//ComboPooledDataSource datasource=new ComboPooledDataSource("Oracle");改数据库类型
		conn=datasource.getConnection();
    ```
    
## 07_DBUtils

* 增删改

```java
ComboPooledDataSource datasource=new ComboPooledDataSource();
QueryRunner queryRunner=new QueryRunner(datasource);
//增加
queryRunner.update("insert into bank values(null,?,?)", "wangwu",1000);
//删除
queryRunner.update("delect from bank where id=?", 2);
//更新
queryRunner.update("update bank set money=? where id=?", "wangwu",10000,3);
```

* 查询

    * 比较low的查询方法,自己创建对象

    ```java
    ComboPooledDataSource datasource=new ComboPooledDataSource();
		QueryRunner queryRunner=new QueryRunner(datasource);
		//查询,查询到的数据还是在哪个result里面,然后调用下面的handle方法,由用户手动去封装
		try {
			Student student = queryRunner.query("select * from bank where id=?", new ResultSetHandler<Student>() {

				public Student handle(ResultSet rs) throws SQLException {
					//创建对象
					Student student=new Student();
					while(rs.next()) {
						String name=rs.getString("name");
						int money=rs.getInt("money");
						
						student.setName(name);
						student.setMoney(money);
					}
					return student;
				}	
			}, 2);
			System.out.println(student.toString());
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
    ```
    
    * 直接使用class创建对象

    ```java
    ComboPooledDataSource datasource=new ComboPooledDataSource();
		QueryRunner queryRunner=new QueryRunner(datasource);
		//查询单个对象
		try {
			Student student = queryRunner.query("select * from student where id=?", new BeanHandler<Student>(Student.class), 2);
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		//查询多个对象
		try {
			List<Student> list = queryRunner.query("select * from student where id=?", new BeanListHandler<Student>(Student.class));
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
    ```
    
* `queryRunner.query(sql, rsh, params)`中rsh常new的对象

    * queryRunner.query(sql, new BeanHandler<T>, params)查询到的单个数据封装成一个数组
    
    * queryRunner.query(sql, new BeanListHandler<T>(type), params)查询到的多个数据封装成一个集合,集合里面的元素是数组

    * queryRunner.query(sql, new ArrayHandler(), params)查询到的单个数据封装成一个对象

    * queryRunner.query(sql, new ArrayListHandler(), params)查询到的多个数据封装成一个List<对象>

    * queryRunner.query(sql, new MapHandler(), params)查询到的单个数据封装成一个map

    * queryRunner.query(sql, new MapListHandler(), params)查询到的多个数据封装成一个集合,集合里面的元素map
	  
	  
	  
	 
	  
	  
	
	   	
			
	
			
			
			